#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# HELPER LIST
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# REVERT BY RANGE
#
# @description Revert to previous commits range
# @variable X = range to revert
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# git revert HEAD~X..HEAD

[user]
    email = jgcorradi@gmail.com
    name = Julio Gori Corradi

[credential]
    username = juliogc

[alias]
    undopush = push -f origin HEAD^:master
    undocommit = reset --hard HEAD@{1} # undo merges too
    unchanged = git update-index --assume-unchanged
    # lazy alias
    a = add --all .
    b = branch
    bs = !git b -a
    c = checkout
    change = "!f() { INITIAL='[';BRANCH=$(git rev-parse --abbrev-ref HEAD);FINAL='] ';USER_MESSAGE=$1;MESSAGE=$INITIAL$BRANCH$FINAL$USER_MESSAGE; git add . && git commit -am \"$MESSAGE\"; }; f"
    cmt = commit -am
    f = !git fetch -p && git fetch --all && git update
    lg = log --graph  --pretty=format:'%C(bold red)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%an%Creset' --abbrev-commit --date=relative
    # Requies track alias
    newbranch = "!f() { git checkout -b $1 && git push origin $1 && git track $1; }; f"
    purge = !"git branch -d $(git branch --merged master | grep -v -e '*' -e 'master')"
    st = status
    show-files = "!f() { git show --name-only --pretty=\"%C(bold green)%B\" }; f"
    list-commits = !git shortlog -s -n
    track = "!f() { git checkout --track -B $1 origin/$1; }; f"
    update = "!f() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git st && git pull origin $BRANCH && git push origin $BRANCH; }; f"
    deploy = "!f() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git checkout master && git fetch --all -p && git pull origin master && git merge $BRANCH && git push origin master; }; f"

[core]
    whitespace = space-before-tab,indent-with-non-tab,trailing-space
    excludesfile = /Users/juliocorradi/.gitignore_global
    editor = vim

[color]
    branch = auto
    diff = auto
    interactive = auto
    status = auto
    ui = auto

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
    summary = true

# Use 'origin' as the default remote on the 'master' branch in all cases
[branch "master"]
    remote = origin
    merge = refs/heads/master

# [http]
#     sslVerify = false

# [url "https://"]
#     insteadOf = git://
